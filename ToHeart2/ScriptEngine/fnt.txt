font.pak格式

fsize, ftype (AVG_Init)
	16, 0 (RUBI_FONT:0x10, Avg.msg_font:0) 
		注音字体font16.fd0, font16.fk0
	34, 0 (SYS_FONT:0x22, Avg.msg_font:0) 
		系统字体font34.fd0, font34.fk0
	
FontStruct[0..7]
	typedef struct{
		char *buf; //fd0文件内容
		int ftype; //字体类型 0
		int fsize; //字体大小 16
		int width; //fk0文件开头第一个int（4字节），字体宽度？
		char *kage; //fk0文件内容，阴影？
	}FONT_STRUCT;
	FONT_STRUCT FontStruct[8];

FontStruct[i].buf
	font{%02d:fsize}.fd{%d:ftype}
	
FontStruct[i].kage
	font{%02d:fsize}.fk{%d:ftype}
	
FontStruct[i].fsize
	fsize
	
FontStruct[i].ftype
	ftype

FontStruct[i].width 
	*(int*)FontStruct[i].kage;


-------------------------------


0..30
丂晍抍偺拞偐傜庤傪怢偽偟丄栚妎傑偟帪寁偺僗僀僢僠傪僆僼偵偡傞丅

　布団の中から手を伸ばし、目覚まし時計のスイッチをオフにする。

丂晍抍偺拞偐傜庤傪怢偽偟丄栚妎傑偟帪寁偺僗僀僢僠傪僆僼偵偡傞丅

ftype == 0x22
0x4081  (1)
0x7a95  (2)
0x4081  
0x7a95  
0x4081  
0x7a95
0x6392  (3)
0xcc82  (4)
0x8692  (5)
0xa982
0xe782
0xe88e
0xf082
0x4c90
0xce82
0xb582
0x4181
0xda96
0x6f8a
0xdc82
0xb592
0x9e8e
0x768c
0xcc82
0x5883
0x4383
0x6283
0x6083
0xf082
0x4983
0x7483
0xc982
0xb782
0xe982
0x4281  end
0x4081  (1)
0x7a95  (2)
0x6392  (3) <- cnt == 4


以上只为整型值，0x4081实际上字节排列是0x81 0x40

---------------------------------

FNT_DrawChar

moji == 0x00007a95 (晍)(布) （将会被反转，见后）
fsize == 0x00000022 (34)
width == 0x2 (FontStruct[i].width)
size1 == 0x242 (fsize*fsize/ANTI_CNT == 0x22 * 0x22 / (8 / 4))
ksize1 == (fsize+width*2+1)/ANTI_CNT*(fsize+width*2)
fno == 0x1
draw_mode == 0x18 (24) // bmp_f = (BMP_F*)dest;	 把dest转换为bmp_f类型（BMP_F指针）
han == 0
moji -> 0x957a  //moji = (moji>>8)|((moji<<8)&0xff00); 颠倒字节
MAX_FONT_GROUP == 53 // FontPoint数组大小，
// 循环搜索FontPoint[i].st_word <= moji && moji <= FontPoint[i].ed_word在那个组
i == 0x1c
no == 0xbe7 // FontPoint[i].pointer + moji-FontPoint[i].st_word; == 0xbad + 0x957a + 0x9540
size2 = 0;
ksize2 = 0;
// 判断no非-1，则有效
buf ==  0x02c8dfae // = FontStruct[fno].buf + no * size1 + size2; 0x02ae0020 + 0xbe7 * 0x242 + 0 // font34.fd0
kbuf == 0x030e91a2 //= FontStruct[fno].kage+4 + no * ksize1 + ksize2; 0x02ed0020 + 4 + 0xbe7 * 0x2d2 + 0 // font34.fk0
bai = 0
kage = 0x2
draw_mode = 0x18
FNT_DrawTextBuf_Fkage() （阴影）
src_p = 0x030e91a2 //= fbuf      +     sy * w2       + sx/ANTI_CNT;  0x030e91a2 + 0 * 0x13 + 0 / 2
drev = 2fa
srev = 0 // = w2 - (sw+1)/ANTI_CNT ; 0x13 - (0x26 + 1) /2
w = 0x13 // (sw+1)/ANTI_CNT 字体宽度循环数，
h = 0x26 // sh; 字体高度循环数
alph = 0 // 不写入

for(y = 0 ; y < h ; y++) //src_p不用做额外的递增 h = 0x26
	for(x = 0; x < w; x++) // w = 0x13 //src_p递增
		src_p
		（一个字节修改两个点的rgb，低半字节修改第一个像素，高半字节修改第二像素）
		（应该是38*38像素点）




-----------------------------------

static FONT_POINT	FontPoint[MAX_FONT_GROUP] = {
{0, 33089, 33196}
{108, 33208, 33215}
{116, 33224, 33230}
{123, 33242, 33276}
{158, 33359, 33368}
{168, 33376, 33401}
{194, 33409, 33434}
{220, 33439, 33521}
{303, 33600, 33686}
{390, 33695, 33718}
{414, 33727, 33750}
{438, 33856, 33888}
{471, 33904, 33937}
{505, 33951, 33982}
{537, 34624, 34713}
{627, 34975, 35068}
{721, 35136, 35324}
{910, 35392, 35580}
{1099, 35648, 35836}
{1288, 35904, 36092}
{1477, 36160, 36348}
{1666, 36416, 36604}
{1855, 36672, 36860}
{2044, 36928, 37116}
{2233, 37184, 37372}
{2422, 37440, 37628}
{2611, 37696, 37884}
{2800, 37952, 38140}
{2989, 38208, 38396}
{3178, 38464, 38652}
{3367, 38720, 38908}
{3556, 38976, 39026}
{3607, 39071, 39164}
{3701, 39232, 39420}
{3890, 39488, 39676}
{4079, 39744, 39932}
{4268, 40000, 40188}
{4457, 40256, 40444}
{4646, 40512, 40700}
{4835, 40768, 40956}
{5024, 57408, 57596}
{5213, 57664, 57852}
{5402, 57920, 58108}
{5591, 58176, 58364}
{5780, 58432, 58620}
{5969, 58688, 58876}
{6158, 58944, 59132}
{6347, 59200, 59388}
{6536, 59456, 59644}
{6725, 59712, 59900}
{6914, 59968, 60068}
{7015, 61504, 61511}
{7023, 33088, 33088}
};

----------------------------------

fsize = 0x22 = 34

某个字在buffer数组中的位置

buf （font34.fd0）
0x02dfdfae - 0x02c50020

kbuf （font34.fk0）
0x032591a2 - 0x03040020

font34.fk0（用UltraEdit检查过，结果相同）
0x219182
kbuf[96] = 0x86  <- 0x2191E2
kbuf[97] = 0x88  <- 0x2191E3
kbuf[112] = 0x58 <- 0x2191F2

----------------





